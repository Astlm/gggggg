name: Merge AI Rules

on:
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * *' # 每天凌晨 1 点 (UTC) 运行

jobs:
  merge-rules:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # --- Domain Rules ---
      - name: Download Domain Source Files
        run: |
          echo "Downloading domain source files..."
          curl -f -sSL -o domain_copilot.json https://raw.githubusercontent.com/Astlm/meta-rules-dat/sing/bm7/Copilot/domain.json || echo "Failed to download domain_copilot.json"
          curl -f -sSL -o domain_gemini.json https://raw.githubusercontent.com/Astlm/meta-rules-dat/sing/bm7/Gemini/domain.json || echo "Failed to download domain_gemini.json"
          curl -f -sSL -o domain_claude.json https://raw.githubusercontent.com/Astlm/meta-rules-dat/sing/bm7/Claude/domain.json || echo "Failed to download domain_claude.json"
          curl -f -sSL -o domain_openai.json https://raw.githubusercontent.com/Astlm/meta-rules-dat/sing/bm7/OpenAI/domain.json || echo "Failed to download domain_openai.json"
          curl -f -sSL -o domain_metacubex.json https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo/geosite/category-ai-!cn.json || echo "Failed to download domain_metacubex.json"
          curl -f -sSL -o domain_skk.json https://ruleset.skk.moe/sing-box/non_ip/ai.json || echo "Failed to download domain_skk.json"
          echo "Domain source file download attempts finished."

      - name: Merge Domain Rules
        id: merge_domain
        run: |
          echo "Merging domain rules..."
          # jq: 提取所有 domain/suffix/keyword/regex, 处理类型不匹配问题, 去重, 放入 {"rules": [{"domain": [...]}]} 结构
          jq -s '
            # 定义一个函数，安全地将输入转换为数组
            # 如果输入是数组，返回自身
            # 如果输入是字符串，返回包含该字符串的单元素数组
            # 否则（null, number, object, boolean），返回空数组
            def ensure_array:
              if type == "array" then .
              elif type == "string" then [.]
              else []
              end;

            # 步骤1 & 2: 提取、确保是数组、合并并去重
            [
              .[] | .rules? // [] | .[]? | # 遍历所有规则对象
              # 对每个感兴趣的字段调用 ensure_array 函数后再合并
              (.domain | ensure_array) +
              (.domain_suffix | ensure_array) +
              (.domain_keyword | ensure_array) +
              (.domain_regex | ensure_array)
            ] | flatten | unique
            # 步骤3: 构建最终结构
            | if length > 0 then {"rules": [{"domain": .}]} else {"rules": []} end
          ' domain_*.json > AI-Domain.json

          # 检查生成的规则数量 (保持不变)
          DOMAIN_RULE_COUNT=$(jq '(.rules? | first | .domain? // []) | length' AI-Domain.json)
          if [ "$DOMAIN_RULE_COUNT" -eq 0 ]; then
            echo "::warning::Generated AI-Domain.json contains no domain rules."
            echo "domain_rules_generated=false" >> $GITHUB_OUTPUT
          else
            echo "Domain rules merged into AI-Domain.json"
            echo "Total unique domain rules: $DOMAIN_RULE_COUNT"
            echo "domain_rules_generated=true" >> $GITHUB_OUTPUT
          fi

      # --- IP Rules ---
      - name: Download IP Source Files
        run: |
          echo "Downloading IP source files..."
          curl -f -sSL -o ip_copilot.json https://raw.githubusercontent.com/Astlm/meta-rules-dat/sing/bm7/Copilot/ipcidr.json || echo "Failed to download ip_copilot.json"
          curl -f -sSL -o ip_openai.json https://raw.githubusercontent.com/Astlm/meta-rules-dat/sing/bm7/OpenAI/ipcidr.json || echo "Failed to download ip_openai.json"
          echo "IP source file download attempts finished."

      - name: Merge IP Rules
        id: merge_ip
        run: |
          echo "Merging IP rules..."
          # jq: 提取所有 ip_cidr, 处理类型不匹配, 去重, 放入 {"rules": [{"ip_cidr": [...]}]} 结构
          jq -s '
            # 复用 ensure_array 函数
            def ensure_array:
              if type == "array" then .
              elif type == "string" then [.]
              else []
              end;

            # 步骤1 & 2: 提取、确保是数组、合并并去重
            [
              .[] | .rules? // [] | .[]? | # 遍历所有规则对象
              (.ip_cidr | ensure_array)     # 对 ip_cidr 字段调用 ensure_array
            ] | flatten | unique
            # 步骤3: 构建最终结构
            | if length > 0 then {"rules": [{"ip_cidr": .}]} else {"rules": []} end
          ' ip_*.json > AI-IP.json

          # 检查生成的规则数量 (保持不变)
          IP_RULE_COUNT=$(jq '(.rules? | first | .ip_cidr? // []) | length' AI-IP.json)
          if [ "$IP_RULE_COUNT" -eq 0 ]; then
            echo "::warning::Generated AI-IP.json contains no IP rules."
            echo "ip_rules_generated=false" >> $GITHUB_OUTPUT
          else
            echo "IP rules merged into AI-IP.json"
            echo "Total unique IP rules: $IP_RULE_COUNT"
            echo "ip_rules_generated=true" >> $GITHUB_OUTPUT
          fi

      # --- Cleanup and Commit ---
      - name: Clean up temporary files
        if: always()
        run: rm -f domain_*.json ip_*.json

      - name: Commit changes
        if: steps.merge_domain.outputs.domain_rules_generated == 'true' || steps.merge_ip.outputs.ip_rules_generated == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add AI-Domain.json AI-IP.json
          if git diff --staged --quiet; then
            echo "No effective changes detected in rule files compared to the last commit."
          else
            git commit -m "Update AI ruleset (Automated)"
            # 使用简单的重试逻辑增加推送成功率
            ATTEMPTS=0
            MAX_ATTEMPTS=3
            SUCCESS=false
            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              git push && SUCCESS=true && break
              ATTEMPTS=$((ATTEMPTS + 1))
              if [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; then
                echo "Push failed. Retrying in 5 seconds... (Attempt $ATTEMPTS/$MAX_ATTEMPTS)"
                sleep 5
              fi
            done
            if [ "$SUCCESS" = true ]; then
              echo "Changes committed and pushed."
            else
              echo "::error::Failed to push changes after $MAX_ATTEMPTS attempts."
              exit 1 # 让工作流失败
            fi
          fi
